<?php
$translate = $this->plugin('translate');
$escape = $this->plugin('escapeHtml');
$searchAction = $this->url('site/resource', ['controller' => 'item', 'action' => 'browse'], true);

// Get the properties from the block config
$propertyOne = $this->propertyOne ?? '';
$propertyTwo = $this->propertyTwo ?? '';
$joinType = $this->joinType ?? 'and';

// Get the property labels
$propertyOneData = !empty($propertyOne) ? $this->api()->searchOne('properties', ['term' => $propertyOne])->getContent() : null;
$propertyTwoData = !empty($propertyTwo) ? $this->api()->searchOne('properties', ['term' => $propertyTwo])->getContent() : null;

$propertyOneLabel = $propertyOneData ? $propertyOneData->label() : $propertyOne;
$propertyTwoLabel = $propertyTwoData ? $propertyTwoData->label() : $propertyTwo;

// Use the pre-computed values from the service
$propertyOneValues = $this->propertyOneValues ?? [];
$relationshipMap = $this->relationshipMap ?? [];
$propertyTwoValues = $this->propertyTwoValues ?? [];

// Convert the relationship map to JSON for JavaScript
$relationshipMapJson = json_encode($relationshipMap);
$propertyTwoValuesJson = json_encode($propertyTwoValues);
?>

<div class="dual-property-search">
    <h4><?php echo $translate('Search by property values'); ?></h4>
    
    <form action="<?php echo $escape($searchAction); ?>" method="GET" id="dual-property-search-form">
        <div class="form-group">
            <label for="property-one-select"><?php echo $escape($propertyOneLabel); ?></label>
            <select name="property_one_value" id="property-one-select">
                <option value=""><?php echo $translate('---'); ?></option>
                <?php foreach ($propertyOneValues as $value): ?>
                <option value="<?php echo $escape($value); ?>">
                    <?php echo $escape($value); ?>
                </option>
                <?php endforeach; ?>
            </select>
        </div>

        <div class="form-group">
            <label for="property-two-select"><?php echo $escape($propertyTwoLabel); ?></label>
            <select name="property_two_value" id="property-two-select" disabled>
                <option value=""><?php echo $translate('---'); ?></option>
                <!-- Will be populated via JavaScript -->
            </select>
        </div>

        <!-- Hidden fields to include in the search -->
        <input type="hidden" name="property[0][joiner]" value="and">
        <input type="hidden" name="property[0][property]" value="<?php echo $escape($propertyOne); ?>">
        <input type="hidden" name="property[0][type]" value="eq">
        <input type="hidden" name="property[0][text]" id="property-one-hidden">
        
        <input type="hidden" name="property[1][joiner]" value="<?php echo $escape($joinType); ?>">
        <input type="hidden" name="property[1][property]" value="<?php echo $escape($propertyTwo); ?>">
        <input type="hidden" name="property[1][type]" value="eq">
        <input type="hidden" name="property[1][text]" id="property-two-hidden">

        <button type="submit"><?php echo $translate('Search'); ?></button>
    </form>
</div>

<script>
jQuery(document).ready(function($) {
    const propertyOneSelect = document.getElementById('property-one-select');
    const propertyTwoSelect = document.getElementById('property-two-select');
    const propertyOneHidden = document.getElementById('property-one-hidden');
    const propertyTwoHidden = document.getElementById('property-two-hidden');
    const searchForm = document.getElementById('dual-property-search-form');
    
    const joinType = '<?php echo $escape($joinType); ?>';
    const relationshipMap = <?php echo $relationshipMapJson; ?>;
    const allPropertyTwoValues = <?php echo $propertyTwoValuesJson; ?>;
    
    // Update hidden fields on form submission
    $(searchForm).on('submit', function(e) {
        propertyOneHidden.value = propertyOneSelect.value;
        propertyTwoHidden.value = propertyTwoSelect.value;
        
        // Prevent submission if no values are selected
        if (!propertyOneSelect.value) {
            e.preventDefault();
            alert('<?php echo $translate('Please select a value for the first property.'); ?>');
        } else if (joinType === 'and' && !propertyTwoSelect.value) {
            e.preventDefault();
            alert('<?php echo $translate('Please select a value for both properties.'); ?>');
        }
    });
    
    // Enable/disable second dropdown based on first selection
    $(propertyOneSelect).on('change', function() {
        // Clear the second dropdown
        $(propertyTwoSelect).empty().append('<option value=""><?php echo $translate('---'); ?></option>');
        
        if (propertyOneSelect.value) {
            // Enable the second dropdown
            $(propertyTwoSelect).prop('disabled', false);
            
            if (joinType === 'and') {
                // Get related values from the pre-generated map
                const relatedValues = relationshipMap[propertyOneSelect.value] || [];
                
                if (relatedValues.length > 0) {
                    // Add options for related values
                    relatedValues.forEach(function(value) {
                        $(propertyTwoSelect).append(`<option value="${value}">${value}</option>`);
                    });
                } else {
                    // No related values found
                    $(propertyTwoSelect).append(`<option value="" disabled><?php echo $translate('No related values found'); ?></option>`);
                }
            } else {
                // For OR, use all possible values
                allPropertyTwoValues.forEach(function(value) {
                    $(propertyTwoSelect).append(`<option value="${value}">${value}</option>`);
                });
            }
        } else {
            // Disable the second dropdown if nothing is selected
            $(propertyTwoSelect).prop('disabled', true);
        }
    });
});
</script>