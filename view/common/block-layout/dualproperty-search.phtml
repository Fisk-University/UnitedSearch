<?php
$translate = $this->plugin('translate');
$escape = $this->plugin('escapeHtml');
$api = $this->api();

$site = $this->site ?? null;

if ($site):
    $searchAction = $this->url('site/resource', [
        'site-slug' => $site->slug(),
        'controller' => 'item',
        'action' => 'browse',
    ], true);
else:
    $searchAction = '';
    error_log("⚠️ dualproperty-search.phtml: No site context — search form will not submit correctly.");
endif;

// Get the properties from the block config
$propertyOne = $this->propertyOne ?? '';
$propertyTwo = $this->propertyTwo ?? '';
$joinType = $this->joinType ?? 'and';

// Get the property labels
$propertyOneData = !empty($propertyOne) ? $this->api()->searchOne('properties', ['term' => $propertyOne])->getContent() : null;
$propertyTwoData = !empty($propertyTwo) ? $this->api()->searchOne('properties', ['term' => $propertyTwo])->getContent() : null;

$propertyOneLabel = $propertyOneData ? $propertyOneData->label() : $propertyOne;
$propertyTwoLabel = $propertyTwoData ? $propertyTwoData->label() : $propertyTwo;

// Get values for first property
$propertyOneValues = [];
if (!empty($propertyOne)) {
    $propertyOneItems = $this->api()->search('items', [
        'property' => [
            [
                'property' => $propertyOne,
                'type' => 'ex'
            ]
        ],
        'sort_by' => 'title',
        'sort_order' => 'asc'
    ])->getContent();
    
    foreach ($propertyOneItems as $item) {
        $values = $item->value($propertyOne, ['all' => true]);
        foreach ($values as $value) {
            $textValue = trim($value->__toString());
            if (!empty($textValue) && !in_array($textValue, $propertyOneValues)) {
                $propertyOneValues[] = $textValue;
            }
        }
    }
    sort($propertyOneValues);
}

// Pre-load relationships between property values
$relationshipMap = [];
if (!empty($propertyOne) && !empty($propertyTwo) && $joinType === 'and') {
    foreach ($propertyOneValues as $value) {
        $relationshipMap[$value] = [];
    }
    
    // For each state(prop1), find related counties(prop2)
    foreach ($propertyOneValues as $state) {
        // Get items with this state value
        $items = $this->api()->search('items', [
            'property' => [
                [
                    'property' => $propertyOne,
                    'type' => 'eq',
                    'text' => $state
                ]
            ],
        ])->getContent();
        
        // Extract counties from these items
        foreach ($items as $item) {
            $counties = $item->value($propertyTwo, ['all' => true]);
            foreach ($counties as $county) {
                $countyText = trim($county->__toString());
                if (!empty($countyText) && !in_array($countyText, $relationshipMap[$state])) {
                    $relationshipMap[$state][] = $countyText;
                }
            }
        }
        
        // Sort counties alphabetically
        sort($relationshipMap[$state]);
    }
}

// Get all possible values for property two (for OR case)
$propertyTwoValues = [];
if (!empty($propertyTwo) && $joinType === 'or') {
    $propertyTwoItems = $this->api()->search('items', [
        'property' => [
            [
                'property' => $propertyTwo,
                'type' => 'ex'
            ]
        ],
        'sort_by' => 'title',
        'sort_order' => 'asc'
    ])->getContent();
    
    foreach ($propertyTwoItems as $item) {
        $values = $item->value($propertyTwo, ['all' => true]);
        foreach ($values as $value) {
            $textValue = trim($value->__toString());
            if (!empty($textValue) && !in_array($textValue, $propertyTwoValues)) {
                $propertyTwoValues[] = $textValue;
            }
        }
    }
    sort($propertyTwoValues);
}

// Convert the relationship map to JSON for JavaScript
$relationshipMapJson = json_encode($relationshipMap);
$propertyTwoValuesJson = json_encode($propertyTwoValues);
?>

<div class="dual-property-search">
    <h4><?php echo $translate('Search by property values:block'); ?></h4>
    
    <form action="<?php echo $escape($searchAction); ?>" method="GET" id="dual-property-search-form">
        <div class="form-group">
            
            <label for="property-one-select"><?php echo $escape($propertyOneLabel); ?></label>
            <select name="property_one_value" id="property-one-select">
                <option value=""><?php echo $translate('---'); ?></option>
                <?php foreach ($propertyOneValues as $value): ?>
                <option value="<?php echo $escape($value); ?>">
                    <?php echo $escape($value); ?>
                </option>
                <?php endforeach; ?>
            </select>
        </div>

        <div class="form-group">
            <label for="property-two-select"><?php echo $escape($propertyTwoLabel); ?></label>
            <select name="property_two_value" id="property-two-select" disabled>
                <option value=""><?php echo $translate('---'); ?></option>
                <!-- Will be populated via JavaScript -->
            </select>
        </div>

        <!-- Hidden fields to include in the search -->
        <input type="hidden" name="property[0][joiner]" value="and">
        <input type="hidden" name="property[0][property]" value="<?php echo $escape($propertyOne); ?>">
        <input type="hidden" name="property[0][type]" value="eq">
        <input type="hidden" name="property[0][text]" id="property-one-hidden">
        
        <input type="hidden" name="property[1][joiner]" value="<?php echo $escape($joinType); ?>">
        <input type="hidden" name="property[1][property]" value="<?php echo $escape($propertyTwo); ?>">
        <input type="hidden" name="property[1][type]" value="eq">
        <input type="hidden" name="property[1][text]" id="property-two-hidden">

        <button type="submit"><?php echo $translate('Search'); ?></button>
    </form>
</div>

<script>
jQuery(document).ready(function($) {
    const propertyOneSelect = document.getElementById('property-one-select');
    const propertyTwoSelect = document.getElementById('property-two-select');
    const propertyOneHidden = document.getElementById('property-one-hidden');
    const propertyTwoHidden = document.getElementById('property-two-hidden');
    const searchForm = document.getElementById('dual-property-search-form');
    
    const joinType = '<?php echo $escape($joinType); ?>';
    const relationshipMap = <?php echo $relationshipMapJson; ?>;
    const allPropertyTwoValues = <?php echo $propertyTwoValuesJson; ?>;
    
    // Update hidden fields on form submission
    $(searchForm).on('submit', function(e) {
        propertyOneHidden.value = propertyOneSelect.value;
        propertyTwoHidden.value = propertyTwoSelect.value;

        if (!propertyOneSelect.value) {
            e.preventDefault();
            alert('<?php echo $translate('Please select a value for the first property.'); ?>');
            return;
        }

        if (!propertyTwoSelect.value) {
            // If property two is not selected, clear its hidden fields to exclude it from query
            $('input[name="property[1][property]"]').remove();
            $('input[name="property[1][type]"]').remove();
            $('input[name="property[1][text]"]').remove();
            $('input[name="property[1][joiner]"]').remove();
        }
    });

    
    // Enable/disable second dropdown based on first selection
    $(propertyOneSelect).on('change', function() {
        // Clear the second dropdown
        $(propertyTwoSelect).empty().append('<option value=""><?php echo $translate('---'); ?></option>');
        
        if (propertyOneSelect.value) {
            // Enable the second dropdown
            $(propertyTwoSelect).prop('disabled', false);
            
            if (joinType === 'and') {
                // Get related values from the pre-generated map
                const relatedValues = relationshipMap[propertyOneSelect.value] || [];
                
                if (relatedValues.length > 0) {
                    // Add options for related values
                    relatedValues.forEach(function(value) {
                        $(propertyTwoSelect).append(`<option value="${value}">${value}</option>`);
                    });
                } else {
                    // No related values found
                    $(propertyTwoSelect).append(`<option value="" disabled><?php echo $translate('No related values found'); ?></option>`);
                }
            } else {
                // For OR, use all possible values
                allPropertyTwoValues.forEach(function(value) {
                    $(propertyTwoSelect).append(`<option value="${value}">${value}</option>`);
                });
            }
        } else {
            // Disable the second dropdown if nothing is selected
            $(propertyTwoSelect).prop('disabled', true);
        }
    });
});
</script>