<?php
$translate = $this->plugin('translate');
$escape = $this->plugin('escapeHtml');
$searchAction = $this->url('site/resource', ['controller' => 'item', 'action' => 'browse'], true);

// Get the properties from the block config
$propertyOne = $this->propertyOne ?? '';
$propertyTwo = $this->propertyTwo ?? '';
$joinType = $this->joinType ?? 'and';

// Get the property labels
$propertyOneData = !empty($propertyOne) ? $this->api()->searchOne('properties', ['term' => $propertyOne])->getContent() : null;
$propertyTwoData = !empty($propertyTwo) ? $this->api()->searchOne('properties', ['term' => $propertyTwo])->getContent() : null;

$propertyOneLabel = $propertyOneData ? $propertyOneData->label() : $propertyOne;
$propertyTwoLabel = $propertyTwoData ? $propertyTwoData->label() : $propertyTwo;

// Get values for first property (limited sample)
$propertyOneValues = [];
if (!empty($propertyOne)) {
    // Query for items with this property
    $propertyOneItems = $this->api()->search('items', [
        'property' => [
            [
                'property' => $propertyOne,
                'type' => 'ex'
            ]
        ],
        'limit' => 20 // Start with a small limit for testing
    ])->getContent();
    
    // Extract unique values
    foreach ($propertyOneItems as $item) {
        $values = $item->value($propertyOne, ['all' => true]);
        foreach ($values as $value) {
            $textValue = trim($value->__toString());
            if (!empty($textValue) && !in_array($textValue, $propertyOneValues)) {
                $propertyOneValues[] = $textValue;
            }
        }
    }
    sort($propertyOneValues);
}
?>

<div class="dual-property-search">
    <h4><?php echo $translate('Search by property values'); ?></h4>
    
    <form action="<?php echo $escape($searchAction); ?>" method="GET">
        <div class="form-group">
            <label for="property-one-select"><?php echo $escape($propertyOneLabel); ?></label>
            <select name="property_one_value" id="property-one-select">
                <option value=""><?php echo $translate('Select a value...'); ?></option>
                <?php foreach ($propertyOneValues as $value): ?>
                <option value="<?php echo $escape($value); ?>">
                    <?php echo $escape($value); ?>
                </option>
                <?php endforeach; ?>
            </select>
        </div>

        <div class="form-group">
            <label for="property-two-select"><?php echo $escape($propertyTwoLabel); ?></label>
            <select name="property_two_value" id="property-two-select">
                <option value=""><?php echo $translate('Select a value...'); ?></option>
                <!-- Will be populated later -->
            </select>
        </div>

        <button type="submit"><?php echo $translate('Search'); ?></button>
    </form>
</div>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const propertyOneSelect = document.getElementById('property-one-select');
    const propertyTwoSelect = document.getElementById('property-two-select');
    const searchBlock = document.querySelector('.dual-property-search');
    
    const propertyOne = '<?php echo $escape($propertyOne); ?>';
    const propertyTwo = '<?php echo $escape($propertyTwo); ?>';
    const joinType = '<?php echo $escape($joinType); ?>';
    
    // Start with second dropdown disabled
    propertyTwoSelect.disabled = !propertyOneSelect.value;
    
    // Enable/disable second dropdown based on first selection
    propertyOneSelect.addEventListener('change', function() {
        // Reset the second dropdown
        propertyTwoSelect.innerHTML = '<option value=""><?php echo $translate('Select a value...'); ?></option>';
        
        if (propertyOneSelect.value) {
            propertyTwoSelect.disabled = false;
            
            // Call the API to get related values
            fetchRelatedValues(propertyOne, propertyOneSelect.value, propertyTwo);
        } else {
            propertyTwoSelect.disabled = true;
        }
    });
    
    // Function to fetch related values using AJAX
    function fetchRelatedValues(propertyOne, valueOne, propertyTwo) {
        const url = '<?php echo $this->url('site/property-values', [], ['force_canonical' => true]); ?>';
        
        const queryParams = new URLSearchParams({
            'property_id': propertyTwo,
            'related_property': propertyOne,
            'related_value': valueOne
        });
        
        // Show loading indicator
        propertyTwoSelect.innerHTML = '<option value=""><?php echo $translate('Loading values...'); ?></option>';
        
        fetch(`${url}?${queryParams.toString()}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response error');
                }
                return response.json();
            })
            .then(data => {
                // Reset and repopulate dropdown
                propertyTwoSelect.innerHTML = '<option value=""><?php echo $translate('Select a value...'); ?></option>';
                
                if (data && Array.isArray(data) && data.length > 0) {
                    data.forEach(value => {
                        const option = document.createElement('option');
                        option.value = value;
                        option.textContent = value;
                        propertyTwoSelect.appendChild(option);
                    });
                    console.log('Loaded values for second property:', data);
                } else {
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = '<?php echo $translate('No related values found'); ?>';
                    option.disabled = true;
                    propertyTwoSelect.appendChild(option);
                    console.log('No values found');
                }
            })
            .catch(error => {
                console.error('Error fetching related values:', error);
                propertyTwoSelect.innerHTML = '<option value=""><?php echo $translate('Error loading values'); ?></option>';
            });
    }
});
</script>